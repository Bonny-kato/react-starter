//ðŸ’¡This hook generated by Ai, didn't inspect deeply is just copy-paste.

import { useCallback, useEffect, useState } from "react";

interface OSInfo {
    os: string;
    refreshKey: string;
    refreshKeyCode: number;
}

const useRefreshDetector = (onRefresh: (event: Event) => void) => {
    const [osInfo, setOSInfo] = useState<OSInfo>({
        os: "Unknown",
        refreshKey: "F5",
        refreshKeyCode: 116,
    });

    const getOS = useCallback(() => {
        const userAgent = window.navigator.userAgent.toLowerCase();
        if (userAgent.indexOf("win") > -1) return "Windows";
        if (userAgent.indexOf("mac") > -1) return "MacOS";
        if (userAgent.indexOf("linux") > -1) return "Linux";
        return "Unknown";
    }, []);

    useEffect(() => {
        const os = getOS();
        let refreshKey: string, refreshKeyCode: number;

        switch (os) {
            case "Windows":
            case "Linux":
                refreshKey = "F5";
                refreshKeyCode = 116;
                break;
            case "MacOS":
                refreshKey = "CommandOrControl+R";
                refreshKeyCode = 82;
                break;
            default:
                refreshKey = "F5";
                refreshKeyCode = 116;
        }

        setOSInfo({ os, refreshKey, refreshKeyCode });
    }, [getOS]);

    const handleRefresh = useCallback(
        (event: Event) => {
            event.preventDefault();
            onRefresh(event);
        },
        [onRefresh]
    );

    useEffect(() => {
        const keydownHandler = (event: KeyboardEvent) => {
            if (osInfo.os === "MacOS") {
                if (
                    (event.metaKey || event.ctrlKey) &&
                    event.keyCode === osInfo.refreshKeyCode
                ) {
                    handleRefresh(event);
                }
            } else {
                if (event.keyCode === osInfo.refreshKeyCode) {
                    handleRefresh(event);
                }
            }
        };

        const beforeUnloadHandler = (event: BeforeUnloadEvent) => {
            handleRefresh(event);
        };

        document.addEventListener("keydown", keydownHandler);
        window.addEventListener("beforeunload", beforeUnloadHandler);

        return () => {
            document.removeEventListener("keydown", keydownHandler);
            window.removeEventListener("beforeunload", beforeUnloadHandler);
        };
    }, [osInfo, handleRefresh]);

    return osInfo;
};

export default useRefreshDetector;
